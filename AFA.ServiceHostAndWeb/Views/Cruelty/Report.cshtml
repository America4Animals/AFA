@model AFA.ServiceHostAndWeb.Models.ReportCrueltyModel

@{
    ViewBag.Title = "Report Cruelty";
}

<h2 class="page-header">@ViewBag.Title</h2>

@using (Html.BeginForm("Report", "Cruelty", FormMethod.Post, new { @class = "form-horizontal" }))
{

    <h3>Location (select one)</h3>
    
    <ul id="nearbyPlaces" class="click-to-select-container plain">
        
    </ul>
    <a href="#" class="btn btn-success">more</a>
    
    <h3>Type of Cruelty</h3>
    <div class="control-group">
        @Html.Label("Cruelty Spot Category", new { @class = "control-label" })
        <div class="controls">
            @Html.DropDownListFor(m => m.CrueltySpotCategoryId, Model.AllCrueltySpotCategories)
        </div>
    </div>

    <input type="submit" class="btn btn-primary" />
}

<div id="map"></div>

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.GoogleApiKey&sensor=false&libraries=geometry,places">
</script>

@Scripts.Render("~/bundles/jsrender")

<script id="placesTemplate" type="text/x-jsrender">
    <li>
        <h5>{{>name}}</h5>
        <div>{{>vicinity}}</div>
        <div>{{>~distance(geometry.location)}}</div>
    </li>
</script>

<script type="text/javascript">
    
    var map;
    var service;
    var myLatLng;

    var getNearbyPlaces = function (position) {
        var coordinates = position.coords;
        var lat = coordinates.latitude;
        var lon = coordinates.longitude;

        myLatLng = new google.maps.LatLng(lat, lon);
        map = new google.maps.Map(document.getElementById('map'), {
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            center: myLatLng,
            zoom: 15
        });

        var request = {
            location: myLatLng,
            //radius: '500',
            types: ['amusement_park', 'aquarium', 'veterinary_care', 'zoo'],
            rankBy: google.maps.places.RankBy.DISTANCE
        };

        service = new google.maps.places.PlacesService(map);
        service.nearbySearch(request, placesSearchCallback);
    };

    var placesSearchCallback = function (results, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
            bindPlaces(results);
        }
    };

    var positionError = function () {
        alert("Problem acquiring position");
    };

    var bindPlaces = function (results) {
        $('#nearbyPlaces').html($("#placesTemplate").render(results));
    };

    if (Modernizr.geolocation) {
        navigator.geolocation.getCurrentPosition(getNearbyPlaces, positionError);

    } else {
        // no native support, implement fallback
        // To Do: Ask for zipcode or address, or allow option to not use geolocation
    }

    $.views.helpers({

        distance: function (location) {

            var distanceInMeters = google.maps.geometry.spherical.computeDistanceBetween(myLatLng, location);
            var distanceInMiles = distanceInMeters *= 0.000621371192;
            return distanceInMiles.toFixed(2) + ' miles';
        }
    });

    $('#topMenu .report-cruelty').addClass('active');
</script>