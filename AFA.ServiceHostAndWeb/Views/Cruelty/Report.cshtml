@model AFA.ServiceHostAndWeb.Models.ReportCrueltyModel

@{
    ViewBag.Title = "Report Cruelty";
}

@using (Html.BeginForm("Report", "Cruelty", FormMethod.Post, new { @class = "form-horizontal" }))
{

    <h3>Location (select one)</h3>
    
    <ul id="crueltySpotContainer" class="click-to-select-container plain" data-bind="foreach: availablePlaces, loadingWhen: isLoading">
        <li data-bind="css: { selected: $root.isPlaceSelected($data) }">
            <h5 data-bind="text: name"></h5>
            <div data-bind="text: vicinity"></div>
            <div data-bind="text: $root.distanceInMiles(geometry.location)"></div>
        </li>
    </ul>
    <a id="getMorePlacesButton" href="#" class="btn btn-success" data-bind="css: { disabled: !canRequestMoreNearbyPlaces() }">more</a>
    
    <h3>Type of Cruelty</h3>
    <div class="control-group">
        @Html.Label("Cruelty Spot Category", new { @class = "control-label" })
        <div class="controls">
            <select data-bind="options: availableCategories, optionsText: 'Value', optionsValue: 'Key', value: crueltySpotCategoryId"></select>
        </div>
    </div>

    <input type="submit" class="btn btn-primary" data-bind="click: save, enable: isValidCrueltySpotSpecified" />
}

<div id="map"></div>

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.GoogleApiKey&sensor=false&libraries=geometry,places">
</script>


<script type="text/javascript">

    var viewModel = {};
    var googlePlacesService;
    var placeDetailsHash = new Hashtable();

    var positionError = function () {
        alert("Problem acquiring position");
    };   

    $(function() {
        $('#topMenu .report-cruelty').addClass('active');
        
        var initialData = @Html.Raw(Json.Encode(Model));
        
        function CrueltySpotPlace() {
            var self = this;
            self.name = ko.observable();
            self.vicinity = ko.observable();
            self.lat = ko.observable();
            self.lng = ko.observable();
            self.reference = ko.observable();
            self.address_components = [];
            self.formatted_address = ko.observable();
            self.formatted_phone_number = ko.observable();
            self.website = ko.observable();
        }
        
        function ReportCrueltyViewModel(availableCategories) {
            var self = this;
            self.crueltySpotPlace = ko.observable(new CrueltySpotPlace());
            self.availableCategories = availableCategories;
            self.availablePlaces = ko.observableArray([]);
            self.crueltySpotCategoryId = ko.observable();
            
            self.myLat = ko.observable();
            self.myLon = ko.observable();

            self.isLoading = ko.observable(true);

            self.canRequestMoreNearbyPlaces = ko.observable(false);

            self.myLatLng = ko.computed(function() {
                return new google.maps.LatLng(self.myLat(), self.myLon());
            });
            
            self.distanceInMiles = function(location) {
                var distanceInMeters = google.maps.geometry.spherical.computeDistanceBetween(self.myLatLng(), location);
                var ret = distanceInMeters *= 0.000621371192;
                return ret.toFixed(2) + ' miles';
            };
            
            self.isPlaceSelected = function(item) {
                return item.name === self.crueltySpotPlace().name() && item.vicinity === self.crueltySpotPlace().vicinity();
            };

            self.isValidCrueltySpotSpecified = ko.computed(function() {
                return self.crueltySpotPlace().name() && self.crueltySpotCategoryId() > 0;
            });
            
            self.updateSelectedCrueltySpotPlaceDetails = function() {
                var currentReference = self.crueltySpotPlace().reference();
                if (currentReference) {
                    if (placeDetailsHash.containsKey(currentReference)) {
                        // Update from cache
                        self.updateCrueltySpotPlaceDetails(placeDetailsHash.get(currentReference));
                    } else {
                        getAndUpdatePlaceDetails(currentReference);
                    }
                }
            };

            self.updateCrueltySpotPlaceDetails = function(placeDetails) {
                self.crueltySpotPlace().address_components = placeDetails.address_components;
                self.crueltySpotPlace().formatted_address(placeDetails.formatted_address);
                self.crueltySpotPlace().formatted_phone_number(placeDetails.formatted_phone_number);
                self.crueltySpotPlace().website(placeDetails.website);
            };

            self.save = function() {
                var data = ko.toJSON(self);
                $.ajax({
                    type: "POST",
                    url: "/Cruelty/Report",
                    data: data,
                    contentType: "application/json",
                    success: function(data) {                     
                        if (data.success) {
                            var url = data.redirectUrl;
                            url += '?statusCode=' + data.statusCode;
                            location.href = url;
                        } else {
                            var errorMessages = '';
                            $.each(data.errors, function() {
                                if (errorMessages.length > 1) {
                                    errorMessages += '<br />';
                                }
                                errorMessages += this.errorMessage;
                            });
                            AFA.showErrorMessage(errorMessages);
                        }
                    },
                    error: function() {
                        AFA.showErrorMessage('Server error');
                    }
                });
            };
            
            if (Modernizr.geolocation) {
                navigator.geolocation.getCurrentPosition(getNearbyPlaces, positionError);

            } else {
                // no native support, implement fallback
                // To Do: Ask for zipcode or address, or allow option to not use geolocation
            }

            function getNearbyPlaces(position) {
                var coordinates = position.coords;
        
                self.myLat(coordinates.latitude);
                self.myLon(coordinates.longitude);

                var map = new google.maps.Map(document.getElementById('map'), {
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    center: self.myLatLng(),
                    zoom: 15
                });

                var request = {
                    location: self.myLatLng(),
                    //radius: '500',
                    types: ['amusement_park', 'aquarium', 'veterinary_care', 'zoo'],
                    rankBy: google.maps.places.RankBy.DISTANCE
                };

                googlePlacesService = new google.maps.places.PlacesService(map);
                googlePlacesService.nearbySearch(request, placesSearchCallback);
            };
            
            function placesSearchCallback(results, status, pagination) {
                if (status == google.maps.places.PlacesServiceStatus.OK) {
                    $.each(results, function() {
                        self.availablePlaces.push(this);
                    });
                    
                    self.isLoading(false);
                    if (pagination.hasNextPage) {
                        $('#getMorePlacesButton').click(function() {
                            self.isLoading(true);
                            pagination.nextPage();
                        });
                        self.canRequestMoreNearbyPlaces(true);
                    } else {
                        self.canRequestMoreNearbyPlaces(false);
                    }
                }
            };
            
            function getAndUpdatePlaceDetails(reference) {
                var request = {
                    reference: reference                      
                };

                googlePlacesService.getDetails(request, placesDetailsCallback);
            }
            
            function placesDetailsCallback(place, status) {
                if (status == google.maps.places.PlacesServiceStatus.OK) {
                    viewModel.updateCrueltySpotPlaceDetails(place);
                    placeDetailsHash.put(viewModel.crueltySpotPlace().reference(), place);
                } else {
                    // ToDo: Handle failures gracefully
                    alert('Problem retrieving place details');
                }
            }
        }

        viewModel = (new ReportCrueltyViewModel(initialData.AllCrueltySpotCategories));
        ko.applyBindings(viewModel);
        
        // select cruelty spot handler
        $('#crueltySpotContainer').on('click', 'li', function() {
            var selectedPlace = ko.dataFor(this);
            var currentCrueltySpotPlace = viewModel.crueltySpotPlace;
            var currentName = currentCrueltySpotPlace().name();
            var currentVicinity = currentCrueltySpotPlace().vicinity();

            if (!currentName || currentName != selectedPlace.name || currentVicinity != selectedPlace.vicinity) {
                currentCrueltySpotPlace().name(selectedPlace.name);
                currentCrueltySpotPlace().vicinity(selectedPlace.vicinity);
                currentCrueltySpotPlace().reference(selectedPlace.reference);
                currentCrueltySpotPlace().lat(selectedPlace.geometry.location.lat());
                currentCrueltySpotPlace().lng(selectedPlace.geometry.location.lng());
                viewModel.updateSelectedCrueltySpotPlaceDetails();
            }
        });

    });

    ko.bindingHandlers.loadingWhen = {
        
        init: function(element) {
            var $element = $(element);
            var currentPosition = $element.css('position');
            var $loader = $("<div></div>").addClass("loader").hide();

            //add the loader div to the original element
            $element.append($loader);
 
            //make sure that we can absolutely position the loader against the original element
            if (currentPosition == "auto" || currentPosition == "static") {
                $element.css("position", "relative");
            }

            //center the loader
            $loader.css({
                position: "absolute",
                top: "50%",
                left: "50%",
                "margin-left": -($loader.width() / 2) + "px",
                "margin-top": -($loader.height() / 2) + "px"
            });
        },
        
        update: function (element, valueAccessor) {
            //unwrap the value of the flag using knockout utilities
            var isLoading = ko.utils.unwrapObservable(valueAccessor());
            //get a reference to the parent element
            var $element = $(element);
            //get a reference to the loader
            var $loader = $element.find("div.loader");

            //get a reference to every *other* element
            var $childrenToHide = $element.children(":not(div.loader)");
            
            //if we are currently loading...
            if (isLoading) {
                //...hide and disable the children...
                //$childrenToHide.css("visibility", "hidden").attr("disabled", "disabled");
                $childrenToHide.css("opacity", .5).attr("disabled", "disabled");
                //...and show the loader
                $loader.show();
            }
            else {
                //otherwise, fade out the loader
                $loader.fadeOut("fast");
                //and re-display and enable the children
                //$childrenToHide.css("visibility", "visible").removeAttr("disabled");
                $childrenToHide.css("opacity", 1).removeAttr("disabled");
            }
        }
    };
</script>